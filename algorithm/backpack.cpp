/*
*01背包：一共有N件物品，第i（i从1开始）件物品的重量为w[i]，价值为v[i]。
dp[i][j]表示将前i件物品装进限重为j的背包可以获得的最大价值, 0<=i<=N, 0<=j<=W
1 不装入第i件物品，即dp[i−1][j]；
2 装入第i件物品（前提是能装下），即dp[i−1][j−w[i]] + v[i]。
dp[i][j] = max(dp[i−1][j], dp[i−1][j−w[i]]+v[i]) // j >= w[i]

*完全背包：一共有N种物品，每种物品有无限多个，第i（i从1开始）种物品的重量为w[i]，价值为v[i]
dp[i][j]表示将前i种物品装进限重为j的背包可以获得的最大价值, 0<=i<=N, 0<=j<=W
1 不装入第i种物品，即dp[i−1][j]，同01背包；
2 至少装入1个装入第i种物品，此时和01背包不太一样，因为每种物品有无限个（但注意书包限重是有限的），
  所以此时不应该转移到dp[i−1][j−w[i]]而应该转移到dp[i][j−w[i]]，即装入第i种商品后还可以再继续装入第i种商品。
dp[i][j] = max(dp[i−1][j], dp[i][j−w[i]]+v[i]) // j >= w[i]

*多重背包：一共有N种物品，第i（i从1开始）种物品的数量为n[i]，重量为w[i]，价值为v[i]。
*
